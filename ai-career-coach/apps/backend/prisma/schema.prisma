// Prisma schema for AI Career Coach backend

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users table: Core user authentication and profile
model User {
  id            String        @id @default(uuid()) @db.Uuid
  email         String        @unique @db.VarChar(255)
  username      String        @unique @db.VarChar(50)
  passwordHash  String        @map("password_hash") @db.VarChar(255)
  firstName     String?       @map("first_name") @db.VarChar(100)
  lastName      String?       @map("last_name") @db.VarChar(100)
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp()
  updatedAt     DateTime      @updatedAt @map("updated_at") @db.Timestamp()
  isActive      Boolean       @default(true) @map("is_active")
  emailVerified Boolean       @default(false) @map("email_verified")

  // Relations
  profile       UserProfile?
  orders        Order[]
  sessions      Session[]
  auditLogs     AuditLog[]    @relation("ChangedBy")

  @@index([email], name: "idx_users_email")
  @@index([username], name: "idx_users_username")
  @@map("users")
}

// User profiles: Extended user information (1-to-1 relationship)
model UserProfile {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @unique @map("user_id") @db.Uuid
  bio           String?   @db.Text
  avatarUrl     String?   @map("avatar_url") @db.VarChar(500)
  dateOfBirth   DateTime? @map("date_of_birth") @db.Date
  phoneNumber   String?   @map("phone_number") @db.VarChar(20)
  addressLine1  String?   @map("address_line1") @db.VarChar(255)
  addressLine2  String?   @map("address_line2") @db.VarChar(255)
  city          String?   @db.VarChar(100)
  stateProvince String?   @map("state_province") @db.VarChar(100)
  postalCode    String?   @map("postal_code") @db.VarChar(20)
  country       String?   @db.VarChar(2) // ISO country code

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// Categories: Product categorization
model Category {
  id          String      @id @default(uuid()) @db.Uuid
  name        String      @db.VarChar(100)
  slug        String      @unique @db.VarChar(100)
  description String?     @db.Text
  parentId    String?     @map("parent_id") @db.Uuid
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp()

  // Relations
  parent      Category?   @relation("SubCategories", fields: [parentId], references: [id], onDelete: SetNull)
  children    Category[]  @relation("SubCategories")
  products    Product[]

  @@map("categories")
}

// Products: Core product information
model Product {
  id            String      @id @default(uuid()) @db.Uuid
  sku           String      @unique @db.VarChar(100)
  name          String      @db.VarChar(255)
  description   String?     @db.Text
  price         Decimal     @db.Decimal(10, 2)
  stockQuantity Int         @default(0) @map("stock_quantity")
  categoryId    String?     @map("category_id") @db.Uuid
  isActive      Boolean     @default(true) @map("is_active")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp()
  updatedAt     DateTime    @updatedAt @map("updated_at") @db.Timestamp()

  // Relations
  category      Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  orderItems    OrderItem[]

  @@index([name], name: "idx_products_name")
  @@index([categoryId], name: "idx_products_category")
  @@map("products")
}

// Orders: Transaction records
model Order {
  id              String      @id @default(uuid()) @db.Uuid
  userId          String      @map("user_id") @db.Uuid
  orderNumber     String      @unique @map("order_number") @db.VarChar(50)
  status          String      @default("pending") @db.VarChar(50) // pending, processing, completed, cancelled
  totalAmount     Decimal     @map("total_amount") @db.Decimal(10, 2)
  shippingAddress String?     @map("shipping_address") @db.Text
  billingAddress  String?     @map("billing_address") @db.Text
  createdAt       DateTime    @default(now()) @map("created_at") @db.Timestamp()
  updatedAt       DateTime    @updatedAt @map("updated_at") @db.Timestamp()

  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Restrict)
  orderItems      OrderItem[]

  @@map("orders")
}

// Order items: Products within each order (many-to-many)
model OrderItem {
  id              String   @id @default(uuid()) @db.Uuid
  orderId         String   @map("order_id") @db.Uuid
  productId       String   @map("product_id") @db.Uuid
  quantity        Int
  priceAtPurchase Decimal  @map("price_at_purchase") @db.Decimal(10, 2)

  // Relations
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@map("order_items")
}

// Sessions: User authentication tokens
model Session {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @map("expires_at") @db.Timestamp()
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token], name: "idx_sessions_token")
  @@index([expiresAt], name: "idx_sessions_expires")
  @@map("sessions")
}

// Audit log: Track important data changes
model AuditLog {
  id          String   @id @default(uuid()) @db.Uuid
  tableName   String   @map("table_name") @db.VarChar(50)
  recordId    String   @map("record_id") @db.Uuid
  action      String   @db.VarChar(20) // INSERT, UPDATE, DELETE
  changedBy   String?  @map("changed_by") @db.Uuid
  changedData Json?    @map("changed_data") @db.JsonB
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp()

  // Relations
  user        User?    @relation("ChangedBy", fields: [changedBy], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}
